using System;
using System.Numerics;

namespace Ecosyst√®me.Models
{
    public class Herbivore : LifeForm
    {
        // Constructeur avec sexe pour d√©finir l'emoji
        public Herbivore(bool isFemale)
        {
            Emoji = isFemale ? "ü¶å" : "üêá";
            VisionRadius = 4;
            ContactRadius = 1;
            Health = 100;  // Initialisation de la sant√©
            Energy = 100;  // Initialisation de l'√©nergie
        }

        // Mise √† jour de l'herbivore dans l'√©cosyst√®me
        public override void Update(Ecosystem ecosystem)
        {
            Health -= 0.5f; // R√©duire la sant√© √† chaque mise √† jour

            // Chercher la plante la plus proche
            var plant = ecosystem.FindNearestPlant(this);
            if (plant != null)
            {
                // Calculer la direction vers la plante
                Vector2 direction = new Vector2(plant.Position.X - Position.X, plant.Position.Y - Position.Y);
                direction = Vector2.Normalize(direction); // Normaliser pour un d√©placement directionnel
                Move(direction); // D√©placer l'herbivore

                // Consommer la plante si l'herbivore est √† proximit√©
                if (Vector2.Distance(Position, plant.Position) <= ContactRadius)
                {
                    ecosystem.Consume(this, plant); // Consommer la plante
                }
            }

            // R√©duire l'√©nergie de l'herbivore √† chaque mise √† jour
            Energy -= 1;

            // Si l'√©nergie atteint 0, r√©duire la sant√©
            if (Energy <= 0)
            {
                Health -= 1;
            }

            // Si la sant√© atteint 0, l'herbivore se transforme en viande
            if (Health <= 0)
            {
                ecosystem.AddMeat(Position); // Ajouter de la viande √† la position de l'herbivore
                ecosystem.RemoveLifeForm(this); // Retirer l'herbivore de l'√©cosyst√®me
            }
        }
    }
}

