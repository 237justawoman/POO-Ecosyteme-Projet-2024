using System;
using System.Numerics;

namespace Ecosyst√®me.Models
{
    public class Carnivore : LifeForm
    {
        // Constructeur avec le sexe pour d√©finir l'emoji 
        public Carnivore(bool isFemale)
        {
            Emoji = isFemale ? "üêÜ" : "ü¶Å";
            VisionRadius = 5;
            ContactRadius = 1;
            Health = 100;  // Initialisation de la sant√©
            Energy = 100;  // Initialisation de l'√©nergie
        }

        // Mise √† jour du carnivore dans l'√©cosyst√®me
        public override void Update(Ecosystem ecosystem)
        {
            Health -= 0.5f; // D√©cr√©ment de la sant√© √† chaque mise √† jour

            // Trouver la proie la plus proche
            var prey = ecosystem.FindNearestHerbivore(this);
            if (prey != null)
            {
                // D√©placer le carnivore vers la proie
                Vector2 direction = new Vector2(prey.Position.X - Position.X, prey.Position.Y - Position.Y);
                direction = Vector2.Normalize(direction); // Normalisation pour garantir un mouvement coh√©rent
                Move(direction); // D√©placer le carnivore

                // Si le carnivore atteint la proie, la consommer
                if (Vector2.Distance(Position, prey.Position) <= ContactRadius)
                {
                    ecosystem.Consume(this, prey); // Consommer l'herbivore
                }
            }

            // R√©duction de l'√©nergie du carnivore
            Energy -= 1;

            // Si l'√©nergie est √©puis√©e, la sant√© se r√©duit
            if (Energy <= 0)
            {
                Health -= 1;
            }

            // Si la sant√© tombe √† 0, le carnivore est √©limin√© et remplac√© par de la viande
            if (Health <= 0)
            {
                ecosystem.AddMeat(Position); // Ajouter de la viande √† la position du carnivore
                ecosystem.RemoveLifeForm(this); // Retirer le carnivore de l'√©cosyst√®me
            }
        }
    }
}

