using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;

namespace Ecosyst√®me.Models
{
    public class Plant : LifeForm
    {
        public float RootRadius { get; private set; }
        public float SeedingRadius { get; private set; }

        // Constructeur par d√©faut
        public Plant()
        {
            Emoji = "üåø";
            RootRadius = 2;
            SeedingRadius = 3;
        }

        // Constructeur avec la position
        public Plant(Vector2 position) : this()
        {
            this.Position = position;
        }

        // M√©thode pour obtenir les d√©chets organiques √† proximit√©
        public List<OrganicWaste> GetNearbyOrganicWastes(Ecosystem ecosystem)
        {
            return ecosystem.OrganicWastes.Where(waste => Vector2.Distance(waste.Position, this.Position) <= this.RootRadius).ToList();
        }

        // M√©thode pour absorber les d√©chets organiques √† proximit√©
        public void AbsorbOrganicWaste(Ecosystem ecosystem)
        {
            var absorbableWaste = GetNearbyOrganicWastes(ecosystem);
            foreach (var waste in absorbableWaste.ToList()) // Cr√©er une copie pour √©viter modification pendant l'it√©ration
            {
                Energy += 10; // Augmenter l'√©nergie
                ecosystem.RemoveLifeForm(waste); // Suppression de l'√©l√©ment apr√®s l'absorption
            }
        }

        // M√©thode de mise √† jour de la plante
        public override void Update(Ecosystem ecosystem)
        {
            Health -= 0.5f; // Diminuer la sant√©
            AbsorbOrganicWaste(ecosystem); // Absorber les d√©chets organiques

            if (Health <= 0) 
            {
                ecosystem.AddOrganicWaste(Position); // Ajouter un d√©chet organique si la sant√© atteint 0
            }

            // Chance de semer une nouvelle plante
            if (new Random().NextDouble() < 0.05)
            {
                ecosystem.SeedNewPlant(this); // Planter une nouvelle plante
            }
        }
    }
}

